import { Tappable } from 'native-x-tappable';
import { COLOR, useContainerStyle, useTextStyle, useTheme, } from 'native-x-theme';
import React, { useMemo } from 'react';
import { ActivityIndicator, Text, View } from 'react-native';
import { styles as s } from 'tachyons-react-native';
const styles = {
    container: [s.flexRow, s.flexAuto, s.justifyCenter, s.itemsCenter, s.ba],
    textStyle: [s.fw6, s.f5],
};
const sizes = {
    'x-small': [s.ph2, s.pv1],
    small: [s.ph3, s.pv2],
    normal: [s.ph4, s.pv3],
    large: [s.ph5, s.pv3],
    'x-large': [s.ph6, s.pv3],
};
export function Button(props) {
    const { children, disabled = false, loading = false, fill = false, fillHorizontal = false, rounded = false, outline = false, clear = false, size = 'normal', width, height, minWidth, minHeight, maxWidth, maxHeight, icon, data, onTap, } = props;
    const backgroundColor = outline || clear ? undefined : disabled ? COLOR.DISABLED : props.backgroundColor || COLOR.ACCENT;
    const textColor = disabled
        ? COLOR.DIVIDER
        : props.textColor
            ? props.textColor
            : outline || clear
                ? COLOR.ACCENT
                : COLOR.PRIMARY;
    const borderColor = props.borderColor
        ? props.borderColor
        : outline
            ? textColor
                ? textColor
                : COLOR.ACCENT
            : COLOR.TRANSPARENT;
    const containerStyle = useContainerStyle({ ...props, backgroundColor, borderColor });
    const textStyle = useTextStyle({ ...props, textColor });
    const { getColor } = useTheme();
    const color = getColor?.(textColor);
    const style = useMemo(() => {
        return [
            styles.container,
            containerStyle,
            rounded ? s.brPill : s.br2,
            sizes[size],
            fill ? [s.flex, s.w100, s.h100] : undefined,
            fillHorizontal ? [s.w100] : undefined,
            width ? { width } : undefined,
            height ? { height } : undefined,
            minWidth ? { minWidth } : undefined,
            minHeight ? { minHeight } : undefined,
            maxWidth ? { maxWidth } : undefined,
            maxHeight ? { maxHeight } : undefined,
        ];
    }, [
        containerStyle,
        fill,
        fillHorizontal,
        height,
        maxHeight,
        maxWidth,
        minHeight,
        minWidth,
        rounded,
        size,
        width,
    ]);
    const contentStyle = useMemo(() => {
        return [styles.textStyle, textStyle];
    }, [textStyle]);
    return (React.createElement(Tappable, { data: data, disabled: disabled, onTap: onTap },
        React.createElement(View, Object.assign({ backgroundColor: loading || disabled ? COLOR.DISABLED : backgroundColor, style: style }, props),
            loading ? (React.createElement(React.Fragment, null,
                React.createElement(ActivityIndicator, { size: 'small', color: color }),
                React.createElement(View, { style: [s.pa1] }))) : icon ? (React.createElement(React.Fragment, null,
                icon,
                React.createElement(View, { style: [s.pa1] }))) : null,
            React.createElement(Text, { style: contentStyle }, ` ${children} `))));
}
