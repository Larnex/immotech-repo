import { ReactNode } from 'react';
export declare enum COLOR {
    PRIMARY = "PRIMARY",
    SECONDARY = "SECONDARY",
    TERTIARY = "TERTIARY",
    ACCENT = "ACCENT",
    DIVIDER = "DIVIDER",
    DISABLED = "DISABLED",
    INPUT = "INPUT",
    SUCCESS = "SUCCESS",
    ERROR = "ERROR",
    WARNING = "WARNING",
    TRANSPARENT = "TRANSPARENT"
}
export declare enum THEME {
    LIGHT = "light",
    DARK = "dark"
}
export declare enum BorderSide {
    ALL = "ALL",
    TOP = "TOP",
    RIGHT = "RIGHT",
    BOTTOM = "BOTTOM",
    LEFT = "LEFT"
}
interface ThemeContextType {
    themes: {
        [id: string]: ThemeConfig;
    };
    themeName: string;
    currentTheme: ThemeConfig;
    switchTheme: (name: string) => void;
    getColor: (name: string, theme?: string) => string | undefined;
    getBackgroundColor: (name: string, theme?: string) => {
        backgroundColor?: string;
    } | undefined;
    getTextColor: (name: string, theme?: string) => {
        color?: string;
    } | undefined;
    getBorderColor: (name: string, side?: BorderSide, theme?: string) => {
        borderColor?: string;
        borderTopColor?: string;
        borderRightColor?: string;
        borderBottomColor?: string;
        borderLeftColor?: string;
    } | undefined;
}
export interface ThemeConfig {
    [id: string]: string;
}
interface Props {
    autoSwitchTheme?: boolean;
    autoSwitchStatusBar?: boolean;
    theme: string;
    themes: {
        [id: string]: ThemeConfig;
    };
    children: ReactNode | ReactNode[];
}
export declare function ThemeProvider({ theme, themes, autoSwitchTheme, autoSwitchStatusBar, children, }: Props): JSX.Element;
export declare function useTheme(): ThemeContextType;
export {};
