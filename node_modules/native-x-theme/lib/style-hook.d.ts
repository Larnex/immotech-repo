export declare type BackgroundColor = string;
export interface BackgroundColorStyleProps {
    backgroundColor?: BackgroundColor;
}
export declare type Color = string;
export interface TextColorStyleProps {
    textColor?: Color;
}
export declare type BorderColor = string;
export interface BorderColorStyleProps {
    borderColor?: BorderColor;
    borderLeftColor?: BorderColor;
    borderRightColor?: BorderColor;
    borderTopColor?: BorderColor;
    borderBottomColor?: BorderColor;
}
export declare const BORDER_SIZE: {
    none: import("react-native").RegisteredStyle<{
        borderWidth: number;
    }>;
    normal: {
        borderWidth: number;
    };
    large: import("react-native").RegisteredStyle<{
        borderWidth: number;
    }>;
    'x-large': import("react-native").RegisteredStyle<{
        borderWidth: number;
    }>;
    'xx-large': import("react-native").RegisteredStyle<{
        borderWidth: number;
    }>;
    'xxx-large': import("react-native").RegisteredStyle<{
        borderWidth: number;
    }>;
};
export declare type BorderSize = keyof typeof BORDER_SIZE;
export interface BorderSizeStyleProps {
    border?: BorderSize | boolean;
}
export declare const BORDER_RADIUS: {
    none: undefined;
    small: import("react-native").RegisteredStyle<{
        borderRadius: number;
    }>;
    normal: import("react-native").RegisteredStyle<{
        borderRadius: number;
    }>;
    large: import("react-native").RegisteredStyle<{
        borderRadius: number;
    }>;
    round: import("react-native").RegisteredStyle<{
        borderRadius: number;
    }>;
};
export declare type BorderRadius = keyof typeof BORDER_RADIUS;
export interface BorderRadiusStyleProps {
    borderRadius?: BorderRadius;
}
declare const SHADOW: {
    none: undefined;
    normal: {
        shadowColor: string;
        shadowOffset: {
            width: number;
            height: number;
        };
        shadowRadius: number;
        shadowOpacity: number;
    };
    large: {
        shadowColor: string;
        shadowOffset: {
            width: number;
            height: number;
        };
        shadowRadius: number;
        shadowOpacity: number;
    };
};
export declare type Shadow = keyof typeof SHADOW;
export interface ShadowStyleProps {
    shadow?: Shadow;
    shadowColor?: Color;
}
export declare const OPACITY: {
    transparent: import("react-native").RegisteredStyle<{
        opacity: number;
    }>;
    low: import("react-native").RegisteredStyle<{
        opacity: number;
    }>;
    partial: import("react-native").RegisteredStyle<{
        opacity: number;
    }>;
    medium: import("react-native").RegisteredStyle<{
        opacity: number;
    }>;
    high: import("react-native").RegisteredStyle<{
        opacity: number;
    }>;
    full: import("react-native").RegisteredStyle<{
        opacity: number;
    }>;
};
export declare type Opacity = keyof typeof OPACITY;
export interface OpacityStyleProps {
    opacity?: Opacity;
}
export declare const FONT_SIZE: {
    'xxx-small': {
        fontSize: number;
        lineHeight: number;
    };
    'xx-small': {
        fontSize: number;
        lineHeight: number;
    };
    'x-small': {
        fontSize: number;
        lineHeight: number;
    };
    small: {
        fontSize: number;
        lineHeight: number;
    };
    normal: {
        fontSize: number;
        lineHeight: number;
    };
    large: {
        fontSize: number;
        lineHeight: number;
    };
    'x-large': {
        fontSize: number;
        lineHeight: number;
    };
    'xx-large': {
        fontSize: number;
        lineHeight: number;
    };
    'xxx-large': {
        fontSize: number;
        lineHeight: number;
    };
};
export declare type FontSize = keyof typeof FONT_SIZE;
export interface FontSizeStyleProps {
    fontSize?: FontSize | number;
}
export declare const PADDING: {
    'x-large': import("react-native").RegisteredStyle<{
        padding: number;
    }>;
    large: import("react-native").RegisteredStyle<{
        padding: number;
    }>;
    none: import("react-native").RegisteredStyle<{
        padding: number;
    }>;
    normal: import("react-native").RegisteredStyle<{
        padding: number;
    }>;
    small: import("react-native").RegisteredStyle<{
        padding: number;
    }>;
    'x-small': import("react-native").RegisteredStyle<{
        padding: number;
    }>;
    'horizontal:x-large': import("react-native").RegisteredStyle<{
        paddingLeft: number;
        paddingRight: number;
    }>;
    'horizontal:large': import("react-native").RegisteredStyle<{
        paddingLeft: number;
        paddingRight: number;
    }>;
    'horizontal:none': import("react-native").RegisteredStyle<{
        paddingLeft: number;
        paddingRight: number;
    }>;
    'horizontal:normal': import("react-native").RegisteredStyle<{
        paddingLeft: number;
        paddingRight: number;
    }>;
    'horizontal:small': import("react-native").RegisteredStyle<{
        paddingLeft: number;
        paddingRight: number;
    }>;
    'horizontal:x-small': import("react-native").RegisteredStyle<{
        paddingLeft: number;
        paddingRight: number;
    }>;
    'vertical:x-large': import("react-native").RegisteredStyle<{
        paddingTop: number;
        paddingBottom: number;
    }>;
    'vertical:large': import("react-native").RegisteredStyle<{
        paddingTop: number;
        paddingBottom: number;
    }>;
    'vertical:none': import("react-native").RegisteredStyle<{
        paddingTop: number;
        paddingBottom: number;
    }>;
    'vertical:normal': import("react-native").RegisteredStyle<{
        paddingTop: number;
        paddingBottom: number;
    }>;
    'vertical:small': import("react-native").RegisteredStyle<{
        paddingTop: number;
        paddingBottom: number;
    }>;
    'vertical:x-small': import("react-native").RegisteredStyle<{
        paddingTop: number;
        paddingBottom: number;
    }>;
};
export declare type Padding = keyof typeof PADDING;
export interface PaddingStyleProps {
    padding?: Padding | Padding[] | number;
    paddingLeft?: number;
    paddingRight?: number;
    paddingTop?: number;
    paddingBottom?: number;
    paddingHorizontal?: number;
    paddingVertical?: number;
}
export declare function getPadding({ padding, paddingLeft, paddingRight, paddingTop, paddingBottom, paddingHorizontal, paddingVertical, }: PaddingStyleProps): ((import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}>)[] | {
    padding: number;
    paddingLeft?: undefined;
    paddingRight?: undefined;
    paddingTop?: undefined;
    paddingBottom?: undefined;
} | {
    paddingLeft: number;
    padding?: undefined;
    paddingRight?: undefined;
    paddingTop?: undefined;
    paddingBottom?: undefined;
} | {
    paddingRight: number;
    padding?: undefined;
    paddingLeft?: undefined;
    paddingTop?: undefined;
    paddingBottom?: undefined;
} | {
    paddingTop: number;
    padding?: undefined;
    paddingLeft?: undefined;
    paddingRight?: undefined;
    paddingBottom?: undefined;
} | {
    paddingBottom: number;
    padding?: undefined;
    paddingLeft?: undefined;
    paddingRight?: undefined;
    paddingTop?: undefined;
} | {
    paddingLeft: number;
    paddingRight: number;
    padding?: undefined;
    paddingTop?: undefined;
    paddingBottom?: undefined;
} | {
    paddingTop: number;
    paddingBottom: number;
    padding?: undefined;
    paddingLeft?: undefined;
    paddingRight?: undefined;
} | null)[];
export declare const LINE_HEIGHT: {
    solid: {
        lineHeight: number;
    };
    title: {
        lineHeight: number;
    };
    relax: {
        lineHeight: number;
    };
};
export declare type LineHeight = keyof typeof LINE_HEIGHT;
export interface LineHeightStyleProps {
    lineHeight?: LineHeight | number;
}
export declare type ContainerStyleProps = BackgroundColorStyleProps & BorderColorStyleProps & BorderSizeStyleProps & BorderRadiusStyleProps & OpacityStyleProps & ShadowStyleProps & PaddingStyleProps;
export declare function useContainerStyle(props?: ContainerStyleProps | undefined): ({
    backgroundColor?: string | undefined;
} | {
    borderColor?: string | undefined;
    borderTopColor?: string | undefined;
    borderRightColor?: string | undefined;
    borderBottomColor?: string | undefined;
    borderLeftColor?: string | undefined;
} | import("react-native").RegisteredStyle<{
    borderWidth: number;
}> | {
    borderWidth: number;
} | import("react-native").RegisteredStyle<{
    borderRadius: number;
}> | import("react-native").RegisteredStyle<{
    opacity: number;
}> | ((import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    padding: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingLeft: number;
    paddingRight: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}> | import("react-native").RegisteredStyle<{
    paddingTop: number;
    paddingBottom: number;
}>)[] | {
    padding: number;
    paddingLeft?: undefined;
    paddingRight?: undefined;
    paddingTop?: undefined;
    paddingBottom?: undefined;
} | {
    paddingLeft: number;
    padding?: undefined;
    paddingRight?: undefined;
    paddingTop?: undefined;
    paddingBottom?: undefined;
} | {
    paddingRight: number;
    padding?: undefined;
    paddingLeft?: undefined;
    paddingTop?: undefined;
    paddingBottom?: undefined;
} | {
    paddingTop: number;
    padding?: undefined;
    paddingLeft?: undefined;
    paddingRight?: undefined;
    paddingBottom?: undefined;
} | {
    paddingBottom: number;
    padding?: undefined;
    paddingLeft?: undefined;
    paddingRight?: undefined;
    paddingTop?: undefined;
} | {
    paddingLeft: number;
    paddingRight: number;
    padding?: undefined;
    paddingTop?: undefined;
    paddingBottom?: undefined;
} | {
    paddingTop: number;
    paddingBottom: number;
    padding?: undefined;
    paddingLeft?: undefined;
    paddingRight?: undefined;
} | null)[] | ({
    shadowColor: string;
    shadowOffset: {
        width: number;
        height: number;
    };
    shadowRadius: number;
    shadowOpacity: number;
} | {
    shadowColor: string | undefined;
} | null | undefined)[] | ({
    borderColor?: string | undefined;
    borderTopColor?: string | undefined;
    borderRightColor?: string | undefined;
    borderBottomColor?: string | undefined;
    borderLeftColor?: string | undefined;
} | {
    borderWidth: number;
} | undefined)[] | undefined)[];
export declare function useShadowStyle({ shadow, shadowColor }: ShadowStyleProps): ({
    shadowColor: string;
    shadowOffset: {
        width: number;
        height: number;
    };
    shadowRadius: number;
    shadowOpacity: number;
} | {
    shadowColor: string | undefined;
} | null | undefined)[];
export declare type TextStyleProps = FontSizeStyleProps & LineHeightStyleProps & TextColorStyleProps;
export declare function useTextStyle(props?: TextStyleProps | undefined): ({
    color?: string | undefined;
} | {
    lineHeight: number;
} | {
    fontSize: number;
} | undefined)[];
export {};
