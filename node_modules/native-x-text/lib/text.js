import { COLOR, useTextStyle } from 'native-x-theme';
import React, { useMemo } from 'react';
import { Text as RNText } from 'react-native';
import { styles as s } from 'tachyons-react-native';
const TextAncestorStyleContext = React.createContext([]);
export function Text(props) {
    const { style, alignCenter, alignRight, fill, bold, semiBold, thin, italic, upperCase, children, onPress, numberOfLines, onLayout, fontSize, textColor, } = props;
    const defaultStyle = useTextStyle({ fontSize: 'normal', textColor: COLOR.SECONDARY });
    const textAncestorStyle = React.useContext(TextAncestorStyleContext);
    const textStyle = useTextStyle({ ...props, fontSize, textColor });
    const composedStyle = useMemo(() => [
        defaultStyle,
        textAncestorStyle,
        alignCenter ? s.tc : alignRight ? s.tr : s.tl,
        fill && s.w100,
        upperCase && { textTransform: 'uppercase' },
        bold && s.b,
        semiBold && s.fw5,
        thin && s.fw2,
        italic && s.i,
        textStyle,
        style,
    ], [
        defaultStyle,
        textAncestorStyle,
        alignCenter,
        alignRight,
        fill,
        upperCase,
        bold,
        semiBold,
        thin,
        italic,
        textStyle,
        style,
    ]);
    if (props.children == null) {
        return null;
    }
    return (React.createElement(TextAncestorStyleContext.Provider, { value: composedStyle },
        React.createElement(RNText, { style: composedStyle, onPress: onPress, numberOfLines: numberOfLines, onLayout: onLayout }, children)));
}
