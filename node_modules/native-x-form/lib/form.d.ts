import { ReactNode } from 'react';
import { ValidatorContext } from './form-validators';
interface FormContextType<T> {
    state: T;
    submitted?: boolean;
    submitForm?: () => Promise<any>;
    resetForm?: () => void;
    setFormValue?: (name: string, value: T) => void;
    setItemContext?: (name: string, value: ValidatorContext<T>) => void;
}
interface Props<T> {
    state?: T;
    children?: (props: {
        state: T;
        submitForm: () => Promise<any>;
        resetForm: () => void;
    }) => ReactNode | ReactNode[];
    submitIfValid?: boolean;
    onSubmit?: (props: {
        state: T;
        isValid: boolean;
    }) => Promise<any>;
    onChange?: (props: {
        state: T;
        isValid: boolean;
    }) => Promise<any>;
}
export declare function Form<T>({ submitIfValid, onSubmit, onChange, children, ...props }: Props<T>): JSX.Element;
export declare function useFormContext(): FormContextType<any>;
export {};
