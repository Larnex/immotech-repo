import React, { ReactElement } from 'react';
import { Validator } from './form-validators';
export declare type AcceptableFormValue = string | boolean | number;
export declare type FormChildProp<T extends AcceptableFormValue> = {
    value?: T;
    onChange?: (value: T) => void;
    onChangeText?: (value: T) => void;
    onBlur?: () => void;
    error?: string | Error | null;
    isLoading?: boolean;
};
interface Props<T extends AcceptableFormValue> {
    name: string;
    validators?: Validator<T>[];
    children: ReactElement<FormChildProp<T>>;
}
export declare function FormItem<T extends AcceptableFormValue>({ children, name, validators }: Props<T>): React.ReactElement<FormChildProp<T>, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
export {};
