import React, { createContext, useCallback, useContext, useMemo, useRef, useState, } from 'react';
const FormContext = createContext({ state: {} });
export function Form({ submitIfValid = true, onSubmit, onChange, children, ...props }) {
    const context = useRef({});
    const state = useRef(props.state || {});
    const [submitted, setSubmitted] = useState(false);
    const setFormValue = useCallback((name, value) => {
        state.current = { ...state.current, [name]: value };
        const isValid = Object.keys(context.current)
            .map(key => context.current?.[key]?.validate?.())
            .filter(i => i !== true).length === 0;
        onChange?.({ state: state.current, isValid });
    }, [onChange]);
    const setItemContext = useCallback((name, itemContext) => {
        context.current = { ...context.current, [name]: itemContext };
    }, []);
    const submitForm = useCallback(async () => {
        const isValid = Object.keys(context.current)
            .map(key => context.current?.[key]?.validate?.())
            .filter(i => i !== true).length === 0;
        setSubmitted(true);
        if (!submitIfValid || isValid) {
            onSubmit?.({ state: state.current, isValid });
        }
    }, [onSubmit, submitIfValid]);
    const resetForm = useCallback(() => {
        Object.keys(context).map(key => context.current?.[key]?.clear?.());
        setSubmitted(false);
    }, [context]);
    const value = useMemo(() => {
        return {
            state: state.current,
            submitted,
            submitForm,
            resetForm,
            setFormValue,
            setItemContext,
        };
    }, [submitted, submitForm, resetForm, setFormValue, setItemContext]);
    return (React.createElement(FormContext.Provider, { value: value }, children?.({ state: state.current, submitForm, resetForm })));
}
export function useFormContext() {
    return useContext(FormContext);
}
