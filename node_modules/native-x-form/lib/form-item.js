import React, { useCallback, useEffect, useState } from 'react';
import { useFormContext } from './form';
import { useValidatedState } from './form-validators';
export function FormItem({ children, name, validators }) {
    const [touched, setTouched] = useState(false);
    const { state, submitted, setItemContext, setFormValue } = useFormContext();
    const [value, setValue, stateContext] = useValidatedState(validators || [], state[name]);
    const onChange = useCallback((currentValue) => {
        setValue(currentValue);
        setTouched?.(true);
    }, [setValue, setTouched]);
    const onBlur = useCallback(() => {
        setTouched?.(true);
    }, [setTouched]);
    useEffect(() => {
        setItemContext?.(name, stateContext);
    }, [name, setItemContext, stateContext]);
    useEffect(() => {
        setFormValue?.(name, value);
    }, [setFormValue, name, value]);
    return React.cloneElement(children, {
        value,
        onBlur,
        onChange,
        onChangeText: onChange,
        error: touched || submitted ? stateContext?.error : undefined,
    });
}
