import * as emailValidator from 'email-validator';
import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
export function isEmpty(errorMessage) {
    return (text) => {
        if (typeof text === 'number') {
            return undefined;
        }
        if (typeof text !== 'string') {
            return text ? undefined : errorMessage;
        }
        return text.trim() !== '' ? undefined : errorMessage;
    };
}
export function isInvalidEmail(errorMessage = 'Invalid email!') {
    return text => text.trim() === '' ? undefined : emailValidator.validate(text) ? undefined : errorMessage;
}
const alphaNumericRegEx = /^[a-z0-9 ]+$/i;
export function isNonAlphaNumeric(errorMessage) {
    return value => alphaNumericRegEx.test((value || '').toString().trim()) ? undefined : errorMessage;
}
export function useValidatedState(validators, initialValue) {
    const previousValue = useRef(initialValue);
    const [state, setState] = useState(initialValue);
    const [error, setError] = useState();
    const clear = useCallback(() => {
        setError(undefined);
    }, []);
    const validate = useCallback(() => {
        previousValue.current = state;
        for (const validator of validators) {
            const errorMessage = validator(state);
            if (errorMessage) {
                setError(errorMessage);
                return false;
            }
        }
        setError(undefined);
        return true;
    }, [state, validators]);
    useEffect(() => {
        validate();
    }, [state, validate, validators]);
    return useMemo(() => [state, setState, { value: state, error, clear, validate }], [
        clear,
        error,
        state,
        validate,
    ]);
}
